DROP TABLE IF EXISTS short_user CASCADE;
create table short_user (
user_id SERIAL,
nick_name varchar(64) NOT NULL UNIQUE,
rating bigint NOT NULL,
avatar VARCHAR,
rights varchar NOT NULL,
PRIMARY KEY (user_id)
);

DROP TABLE IF EXISTS user_info CASCADE;
create table user_info (
user_id bigint NOT NULL,
mail varchar(254) NOT NULL UNIQUE,
birth_date bigint,
info varchar,
registration_time bigint NOT NULL,
last_session bigint NOT NULL,
messages_count bigint NOT NULL,
themes_count bigint NOT NULL,
pass_hash varchar (64) NOT NULL,
name varchar (64),
FOREIGN KEY (user_id) REFERENCES short_user (user_id) ON DELETE CASCADE
);

DROP TABLE IF EXISTS auth CASCADE;
create table auth (
user_id bigint NOT NULL,
token varchar (20) NOT NULL UNIQUE,
FOREIGN KEY (user_id) REFERENCES short_user (user_id) ON DELETE CASCADE
);

DROP TABLE IF EXISTS section CASCADE;
create table section (
section_id SERIAL,
name varchar (64) NOT NULL,
themes_count bigint NOT NULL,
subsections_count bigint NOT NULL,
PRIMARY KEY (section_id)
);

DROP TABLE IF EXISTS subsection CASCADE;
create table subsection (
subsection_id SERIAL,
section_id bigint NOT NULL,
name varchar (64) NOT NULL,
themes_count bigint NOT NULL,
PRIMARY KEY (subsection_id),
FOREIGN KEY (section_id) REFERENCES section (section_id) ON DELETE CASCADE
);

DROP TABLE IF EXISTS theme CASCADE;
create table theme (
theme_id SERIAL,
user_id bigint NOT NULL,
section_id bigint NOT NULL,
subsection_id bigint NOT NULL,
title varchar (100) NOT NULL,
date bigint NOT NULL,
message_count bigint NOT NULL,
status boolean NOT NULL,
PRIMARY KEY (theme_id),
FOREIGN KEY (user_id) REFERENCES short_user (user_id), 
FOREIGN KEY (section_id) REFERENCES section (section_id) ON DELETE CASCADE,
FOREIGN KEY (subsection_id) REFERENCES subsection (subsection_id) ON DELETE CASCADE
);

DROP TABLE IF EXISTS message CASCADE;
create table message (
message_id SERIAL,
user_id bigint NOT NULL,
theme_id bigint NOT NULL,
date bigint NOT NULL,
body varchar (16000) NOT NULL,
update bigint,
rating bigint NOT NULL,
updater_id bigint,
updater_nick_name varchar (60),
PRIMARY KEY (message_id),
FOREIGN KEY (user_id) REFERENCES short_user (user_id), 
FOREIGN KEY (updater_id) REFERENCES short_user (user_id), 
FOREIGN KEY (theme_id) REFERENCES theme (theme_id) ON DELETE CASCADE
);

DROP TABLE IF EXISTS message_mark CASCADE;
create table message_mark (
user_id bigint NOT NULL,
message_id bigint NOT NULL,
mark boolean NOT NULL,
FOREIGN KEY (user_id) REFERENCES short_user (user_id),
FOREIGN KEY (message_id) REFERENCES message (message_id) ON DELETE CASCADE
);

DROP TABLE IF EXISTS info CASCADE;
create table info (
identifier varchar(64) PRIMARY KEY,
title varchar,
text varchar
);

DROP TABLE IF EXISTS confirm CASCADE;
CREATE TABLE confirm (
  user_id BIGINT NOT NULL UNIQUE,
  confirm_hash VARCHAR(256)
);


